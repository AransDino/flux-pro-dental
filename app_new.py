import streamlit as st
import os
import time
import replicate
import requests
from datetime import datetime
from pathlib import Path
import tempfile
import json

# Configurar la p√°gina
st.set_page_config(
    page_title="ü¶∑ Ai Models Pro Generator - by Ayoze Ben√≠tez",
    page_icon="ü¶∑",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuraci√≥n de directorios
HISTORY_DIR = Path("historial")
HISTORY_FILE = HISTORY_DIR / "history.json"

# Crear directorio de historial si no existe
HISTORY_DIR.mkdir(exist_ok=True)

# Funciones de historial
def load_history():
    """Cargar historial desde archivo JSON"""
    if HISTORY_FILE.exists():
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            return []
    return []

def save_to_history(item):
    """Guardar item al historial"""
    try:
        history = load_history()
        history.insert(0, item)  # A√±adir al principio
        
        # Mantener solo los √∫ltimos 100 elementos
        history = history[:100]
        
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
    except Exception as e:
        st.error(f"Error al guardar historial: {str(e)}")

def download_and_save_file(url, filename, file_type):
    """Descargar archivo y guardarlo localmente"""
    try:
        local_path = HISTORY_DIR / filename
        
        # Si ya existe, no descargar de nuevo
        if local_path.exists():
            return str(local_path)
        
        response = requests.get(url, timeout=60)
        if response.status_code == 200:
            with open(local_path, 'wb') as f:
                f.write(response.content)
            return str(local_path)
        else:
            return None
    except Exception as e:
        st.error(f"Error al descargar {file_type}: {str(e)}")
        return None

# Funci√≥n para cargar configuraci√≥n
def load_config():
    try:
        from config import REPLICATE_API_TOKEN
        if REPLICATE_API_TOKEN == "tu_token_aqui":
            return None
        os.environ["REPLICATE_API_TOKEN"] = REPLICATE_API_TOKEN
        return REPLICATE_API_TOKEN
    except ImportError:
        return None

# Funci√≥n para generar imagen
def generate_image(prompt, **params):
    client = replicate.Client()
    
    prediction = client.predictions.create(
        version="black-forest-labs/flux-pro",
        input={
            "prompt": prompt,
            **params
        }
    )
    
    return prediction

# Funci√≥n para generar video con Seedance
def generate_video_seedance(prompt, **params):
    output = replicate.run(
        "bytedance/seedance-1-pro",
        input={
            "prompt": prompt,
            **params
        }
    )
    return output

# Funci√≥n para generar video anime con Pixverse
def generate_video_pixverse(prompt, **params):
    output = replicate.run(
        "pixverse/pixverse-v3.5",
        input={
            "prompt": prompt,
            **params
        }
    )
    return output

# T√≠tulo principal
st.title("ü¶∑ Flux Pro Generator")
st.markdown("### Generador de im√°genes y videos dentales con IA")

# Verificar configuraci√≥n
token = load_config()
if not token:
    st.error("‚ùå **Error de configuraci√≥n**")
    st.markdown("""
    **Por favor configura tu token de Replicate:**
    1. Copia `config.example.py` como `config.py`
    2. Edita `config.py` y configura tu token real
    3. Reinicia la aplicaci√≥n
    """)
    st.stop()

# Sidebar para configuraci√≥n (SIEMPRE VISIBLE)
with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    # Selector de tipo de contenido
    content_type = st.selectbox(
        "üéØ Tipo de contenido:",
        ["üñºÔ∏è Imagen (Flux Pro)", "üé¨ Video (Seedance)", "üé≠ Video Anime (Pixverse)"],
        help="Selecciona el tipo de contenido que quieres generar"
    )
    
    st.divider()
    
    # Configuraci√≥n seg√∫n el tipo
    if "Imagen" in content_type:
        st.subheader("üì∏ Par√°metros de Imagen")
        
        col1, col2 = st.columns(2)
        with col1:
            steps = st.slider("Pasos", min_value=10, max_value=50, value=25, help="Calidad vs velocidad")
            width = st.selectbox("Ancho", [512, 768, 1024, 1280], index=2)
        
        with col2:
            guidance = st.slider("Guidance", min_value=1, max_value=10, value=3, help="Fuerza del guidance")
            height = st.selectbox("Alto", [512, 768, 1024, 1280], index=2)
        
        aspect_ratio = st.selectbox("Relaci√≥n de aspecto", ["1:1", "16:9", "9:16", "4:3", "3:4"], index=0)
        output_format = st.selectbox("Formato", ["webp", "jpg", "png"], index=0)
        output_quality = st.slider("Calidad", min_value=60, max_value=100, value=80)
        
        # Par√°metros avanzados
        with st.expander("üîß Par√°metros avanzados"):
            interval = st.slider("Intervalo", min_value=1, max_value=5, value=2)
            safety_tolerance = st.slider("Tolerancia de seguridad", min_value=1, max_value=5, value=2)
            prompt_upsampling = st.checkbox("Mejora de prompt", value=False)
        
        params = {
            "steps": steps,
            "width": width,
            "height": height,
            "guidance": guidance,
            "interval": interval,
            "aspect_ratio": aspect_ratio,
            "output_format": output_format,
            "output_quality": output_quality,
            "safety_tolerance": safety_tolerance,
            "prompt_upsampling": prompt_upsampling
        }
    
    elif "Seedance" in content_type:  # Video Seedance
        st.subheader("üé¨ Par√°metros de Video (Seedance)")
        
        col1, col2 = st.columns(2)
        with col1:
            fps = st.selectbox("FPS", [12, 24, 30], index=1)
            duration = st.slider("Duraci√≥n (seg)", min_value=3, max_value=10, value=5)
        
        with col2:
            resolution = st.selectbox("Resoluci√≥n", ["720p", "1080p", "1440p"], index=1)
            aspect_ratio = st.selectbox("Relaci√≥n de aspecto", ["16:9", "9:16", "1:1"], index=0)
        
        camera_fixed = st.checkbox("C√°mara fija", value=False, help="Si est√° marcado, la c√°mara no se mueve")
        
        params = {
            "fps": fps,
            "duration": duration,
            "resolution": resolution,
            "aspect_ratio": aspect_ratio,
            "camera_fixed": camera_fixed
        }
    
    else:  # Video Anime Pixverse
        st.subheader("üé≠ Par√°metros de Video Anime (Pixverse)")
        
        col1, col2 = st.columns(2)
        with col1:
            style = st.selectbox("Estilo", ["anime", "realistic", "cartoon"], index=0)
            quality = st.selectbox("Calidad", ["540p", "720p", "1080p"], index=1)
        
        with col2:
            duration = st.slider("Duraci√≥n (seg)", min_value=3, max_value=10, value=5)
            aspect_ratio = st.selectbox("Relaci√≥n de aspecto", ["16:9", "9:16", "1:1"], index=0)
        
        effect = st.selectbox("Efecto", ["None", "Zoom In", "Zoom Out", "Pan Left", "Pan Right"], index=0)
        motion_mode = st.selectbox("Modo de movimiento", ["normal", "slow", "fast"], index=0)
        sound_effect_switch = st.checkbox("Efectos de sonido", value=False)
        
        # √Årea para prompt negativo
        negative_prompt = st.text_area(
            "Prompt negativo (opcional):",
            height=60,
            placeholder="Describe lo que NO quieres en el video..."
        )
        
        params = {
            "style": style,
            "effect": effect,
            "quality": quality,
            "duration": duration,
            "motion_mode": motion_mode,
            "aspect_ratio": aspect_ratio,
            "negative_prompt": negative_prompt,
            "sound_effect_switch": sound_effect_switch
        }

# Pesta√±as principales
tab1, tab2 = st.tabs(["üöÄ Generar", "üìÇ Historial"])

with tab1:
    # √Årea principal de generaci√≥n
    st.subheader(f"‚ú® Generar {content_type}")
    
    # √Årea principal
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìù Prompt")
        
        # Plantillas predefinidas
        if "Imagen" in content_type:
            templates = {
                "ü¶∑ Dental Cl√°sico": "A hyper-realistic 3D dental illustration showing a top view of the lower dental arch with multiple inlays and onlays placed in molars. The gum tissue and all surrounding teeth are anatomically accurate with realistic textures. Several premolars and molars have visible ceramic restorations perfectly fitted into prepared cavities ‚Äî demonstrating different types of indirect dental restorations. High detail on enamel, restoration surfaces, and gum tissue. Clean white or neutral background. Medical-grade rendering, ideal for dental education and clinical presentations.",
                "üî¨ Instrumental Dental": "Close-up macro photography of dental instruments on a sterile stainless steel tray. Gleaming dental mirrors, probes, and scalers arranged precisely. Soft medical lighting creates blue and silver reflections on the polished surfaces. Shallow depth of field with a clean, clinical background.",
                "üè• Consultorio Moderno": "Modern dental office interior with sleek orange dental chairs, large windows with natural light, contemporary design elements, clean white surfaces, advanced dental equipment, professional medical atmosphere, architectural photography style.",
                "‚ú® Personalizado": ""
            }
        elif "Seedance" in content_type:
            templates = {
                "üåä Cl√≠nica Oce√°nica": "El sol de la ma√±ana entra en cascada a trav√©s de enormes cristaleras con vistas al oc√©ano. [Toma en travelling suave a ras de suelo] El reflejo dorado del amanecer se desliza sobre el suelo pulido mientras la c√°mara sigue las ruedas de un taburete dental que se empuja lentamente hacia un sill√≥n naranja. [Dolly lento hacia arriba] El sill√≥n se ilumina con luz c√°lida; gotas microsc√≥picas de desinfectante brillan como roc√≠o.",
                "ü¶∑ Procedimiento Dental": "Close-up cinematic shot of a dental procedure. Slow motion water droplets from dental cleaning equipment. Professional hands working with precision instruments. Dramatic lighting highlighting the medical precision.",
                "‚ú® Personalizado": ""
            }
        else:  # Pixverse Anime
            templates = {
                "üé≠ Escena de Acci√≥n Anime": "an anime action scene, a woman looks around slowly, mountain landscape in the background",
                "üå∏ Personaje Kawaii": "a cute anime girl with big eyes, pink hair, sitting in a cherry blossom garden, gentle breeze moving her hair",
                "üèØ Paisaje Japon√©s": "traditional Japanese temple in anime style, sunset lighting, dramatic clouds, peaceful atmosphere",
                "‚öîÔ∏è Batalla √âpica": "epic anime battle scene, warriors with glowing swords, dynamic camera movement, intense lighting effects",
                "üåô Noche M√°gica": "anime magical girl under moonlight, sparkles and magical effects, flowing dress, mystical atmosphere",
                "‚ú® Personalizado": ""
            }
        
        selected_template = st.selectbox("üé® Plantillas predefinidas:", list(templates.keys()))
        
        # √Årea de texto para el prompt
        if selected_template == "‚ú® Personalizado":
            prompt = st.text_area(
                "Escribe tu prompt personalizado:",
                height=150,
                placeholder="Describe detalladamente lo que quieres generar..."
            )
        else:
            prompt = st.text_area(
                f"Prompt seleccionado ({selected_template}):",
                value=templates[selected_template],
                height=150
            )
    
    with col2:
        st.header("üéõÔ∏è Panel de Control")
        
        # Informaci√≥n de la configuraci√≥n
        st.info(f"""
        **Configuraci√≥n actual:**
        - üìä Tipo: {content_type}
        - üéØ Plantilla: {selected_template}
        - üìè Caracteres: {len(prompt) if prompt else 0}
        """)
        
        # Bot√≥n de generaci√≥n
        if st.button("üöÄ **GENERAR**", type="primary", use_container_width=True):
            if not prompt.strip():
                st.error("‚ùå Por favor ingresa un prompt")
            else:
                with st.spinner("‚è≥ Generando contenido..."):
                    try:
                        start_time = time.time()
                        start_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        if "Imagen" in content_type:
                            st.info(f"üñºÔ∏è Generando imagen... Iniciado a las {start_datetime}")
                            prediction = generate_image(prompt, **params)
                            
                            # Mostrar ID de predicci√≥n
                            st.code(f"ID de predicci√≥n: {prediction.id}")
                            
                            # Esperar resultado
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            timeout = 300  # 5 minutos
                            
                            while prediction.status not in ["succeeded", "failed", "canceled"]:
                                elapsed = int(time.time() - start_time)
                                if elapsed > timeout:
                                    st.error("‚õî Tiempo de espera excedido (5 minutos)")
                                    break
                                    
                                progress = min(elapsed / 120, 0.95)  # Estimar progreso
                                progress_bar.progress(progress)
                                status_text.text(f"‚è± [{elapsed}s] Estado: {prediction.status}")
                                time.sleep(2)
                                
                                try:
                                    prediction.reload()
                                except Exception as reload_error:
                                    st.error(f"‚ùå Error al verificar estado: {str(reload_error)}")
                                    break
                            
                            progress_bar.progress(1.0)
                            
                            if prediction.status == "succeeded":
                                st.success("‚úÖ ¬°Imagen generada exitosamente!")
                                
                                # Mostrar imagen y enlaces
                                try:
                                    if prediction.output and len(prediction.output) > 0:
                                        # Obtener la URL (manejar si es string o lista)
                                        if isinstance(prediction.output, list):
                                            image_url = prediction.output[0]
                                        elif isinstance(prediction.output, str):
                                            image_url = prediction.output
                                        else:
                                            image_url = str(prediction.output)
                                        
                                        st.write(f"üîó **URL de la imagen:** {image_url}")
                                        
                                        # Descargar y guardar localmente
                                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                                        filename = f"imagen_{timestamp}.{params['output_format']}"
                                        local_path = download_and_save_file(image_url, filename, "imagen")
                                        
                                        # Guardar en historial
                                        history_item = {
                                            "tipo": "imagen",
                                            "fecha": datetime.now().isoformat(),
                                            "prompt": prompt[:100] + "..." if len(prompt) > 100 else prompt,
                                            "plantilla": selected_template,
                                            "url": image_url,
                                            "archivo_local": filename if local_path else None,
                                            "parametros": params,
                                            "id_prediccion": prediction.id
                                        }
                                        save_to_history(history_item)
                                        
                                        if local_path:
                                            st.success(f"üíæ Imagen guardada localmente: `{filename}`")
                                        
                                        # Bot√≥n para abrir la imagen en nueva pesta√±a
                                        st.markdown(f"""
                                        <a href="{image_url}" target="_blank">
                                            <button style="
                                                background-color: #ff6b6b;
                                                color: white;
                                                padding: 10px 20px;
                                                border: none;
                                                border-radius: 5px;
                                                cursor: pointer;
                                                font-size: 16px;
                                                margin: 10px 0;
                                            ">üñºÔ∏è Ver Imagen en Nueva Pesta√±a</button>
                                        </a>
                                        """, unsafe_allow_html=True)
                                        
                                        # Intentar mostrar la imagen directamente
                                        try:
                                            st.image(image_url, caption="Imagen generada", use_container_width=True)
                                        except Exception as img_error:
                                            st.warning(f"‚ö†Ô∏è No se pudo mostrar la imagen directamente: {str(img_error)}")
                                            st.info("üí° Usa el bot√≥n de arriba para ver la imagen")
                                
                                except Exception as e:
                                    st.error(f"‚ùå Error al procesar la imagen: {str(e)}")
                            else:
                                st.error(f"‚ùå La generaci√≥n fall√≥. Estado: {prediction.status}")
                        
                        elif "Seedance" in content_type:
                            st.info(f"üé¨ Generando video con Seedance... Iniciado a las {start_datetime}")
                            
                            with st.spinner("üé• Procesando video..."):
                                output = generate_video_seedance(prompt, **params)
                            
                            if output:
                                st.success("‚úÖ ¬°Video generado exitosamente!")
                                video_url = output
                                st.write(f"üîó **URL del video:** {video_url}")
                                
                                # Descargar y guardar localmente
                                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                                filename = f"video_seedance_{timestamp}.mp4"
                                local_path = download_and_save_file(video_url, filename, "video")
                                
                                # Guardar en historial
                                history_item = {
                                    "tipo": "video_seedance",
                                    "fecha": datetime.now().isoformat(),
                                    "prompt": prompt[:100] + "..." if len(prompt) > 100 else prompt,
                                    "plantilla": selected_template,
                                    "url": video_url,
                                    "archivo_local": filename if local_path else None,
                                    "parametros": params
                                }
                                save_to_history(history_item)
                                
                                if local_path:
                                    st.success(f"üíæ Video guardado localmente: `{filename}`")
                                
                                # Bot√≥n para ver video
                                st.markdown(f"""
                                <a href="{video_url}" target="_blank">
                                    <button style="
                                        background-color: #4CAF50;
                                        color: white;
                                        padding: 10px 20px;
                                        border: none;
                                        border-radius: 5px;
                                        cursor: pointer;
                                        font-size: 16px;
                                        margin: 10px 0;
                                    ">üé¨ Ver Video en Nueva Pesta√±a</button>
                                </a>
                                """, unsafe_allow_html=True)
                                
                                # Intentar mostrar el video directamente
                                try:
                                    st.video(video_url)
                                except Exception as vid_error:
                                    st.warning(f"‚ö†Ô∏è No se pudo mostrar el video directamente: {str(vid_error)}")
                                    st.info("üí° Usa el bot√≥n de arriba para ver el video")
                            else:
                                st.error("‚ùå No se pudo generar el video")
                        
                        else:  # Video Anime Pixverse
                            st.info(f"üé≠ Generando video anime con Pixverse... Iniciado a las {start_datetime}")
                            
                            with st.spinner("üé® Procesando video anime..."):
                                output = generate_video_pixverse(prompt, **params)
                            
                            if output:
                                st.success("‚úÖ ¬°Video anime generado exitosamente!")
                                video_url = output
                                st.write(f"üîó **URL del video:** {video_url}")
                                
                                # Descargar y guardar localmente
                                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                                filename = f"video_anime_{timestamp}.mp4"
                                local_path = download_and_save_file(video_url, filename, "video")
                                
                                # Guardar en historial
                                history_item = {
                                    "tipo": "video_anime",
                                    "fecha": datetime.now().isoformat(),
                                    "prompt": prompt[:100] + "..." if len(prompt) > 100 else prompt,
                                    "plantilla": selected_template,
                                    "url": video_url,
                                    "archivo_local": filename if local_path else None,
                                    "parametros": params
                                }
                                save_to_history(history_item)
                                
                                if local_path:
                                    st.success(f"üíæ Video guardado localmente: `{filename}`")
                                
                                # Bot√≥n para ver video
                                st.markdown(f"""
                                <a href="{video_url}" target="_blank">
                                    <button style="
                                        background-color: #FF69B4;
                                        color: white;
                                        padding: 10px 20px;
                                        border: none;
                                        border-radius: 5px;
                                        cursor: pointer;
                                        font-size: 16px;
                                        margin: 10px 0;
                                    ">üé≠ Ver Video Anime en Nueva Pesta√±a</button>
                                </a>
                                """, unsafe_allow_html=True)
                                
                                # Intentar mostrar el video directamente
                                try:
                                    st.video(video_url)
                                except Exception as vid_error:
                                    st.warning(f"‚ö†Ô∏è No se pudo mostrar el video directamente: {str(vid_error)}")
                                    st.info("üí° Usa el bot√≥n de arriba para ver el video")
                            else:
                                st.error("‚ùå No se pudo generar el video anime")
                    
                    except Exception as e:
                        st.error(f"‚ùå Error durante la generaci√≥n: {str(e)}")

with tab2:
    st.header("üìÇ Historial de Generaciones")
    
    # Cargar historial
    history = load_history()
    
    if not history:
        st.info("üì≠ No hay generaciones en el historial a√∫n.")
        st.markdown("¬°Genera tu primer contenido en la pesta√±a **Generar**!")
    else:
        # Filtros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            filter_type = st.selectbox(
                "Filtrar por tipo:",
                ["Todos", "imagen", "video_seedance", "video_anime"]
            )
        
        with col2:
            search_term = st.text_input("Buscar en prompts:", placeholder="Escribe para buscar...")
        
        with col3:
            st.metric("Total de generaciones", len(history))
        
        # Filtrar historial
        filtered_history = history
        
        if filter_type != "Todos":
            filtered_history = [item for item in filtered_history if item.get("tipo") == filter_type]
        
        if search_term:
            filtered_history = [
                item for item in filtered_history 
                if search_term.lower() in item.get("prompt", "").lower()
            ]
        
        st.divider()
        
        # Mostrar historial filtrado
        for i, item in enumerate(filtered_history):
            with st.expander(f"{'üñºÔ∏è' if item['tipo'] == 'imagen' else 'üé¨' if item['tipo'] == 'video_seedance' else 'üé≠'} {item.get('fecha', 'Sin fecha')[:16]} - {item.get('prompt', 'Sin prompt')[:50]}..."):
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.write(f"**Tipo:** {item.get('tipo', 'Desconocido')}")
                    st.write(f"**Prompt completo:**")
                    st.text_area("", value=item.get('prompt', ''), height=100, key=f"prompt_{i}", disabled=True)
                    st.write(f"**Plantilla:** {item.get('plantilla', 'N/A')}")
                    
                    if item.get('parametros'):
                        with st.expander("Ver par√°metros"):
                            st.json(item['parametros'])
                
                with col2:
                    if item.get('url'):
                        st.markdown(f"""
                        <a href="{item['url']}" target="_blank">
                            <button style="
                                background-color: #007BFF;
                                color: white;
                                padding: 8px 16px;
                                border: none;
                                border-radius: 5px;
                                cursor: pointer;
                                width: 100%;
                                margin: 5px 0;
                            ">üîó Ver Original</button>
                        </a>
                        """, unsafe_allow_html=True)
                    
                    if item.get('archivo_local'):
                        local_file = HISTORY_DIR / item['archivo_local']
                        if local_file.exists():
                            st.success("üíæ Archivo disponible localmente")
                            
                            # Mostrar preview si es imagen
                            if item['tipo'] == 'imagen':
                                try:
                                    st.image(str(local_file), caption="Preview", use_container_width=True)
                                except:
                                    st.info("No se puede mostrar preview")
                        else:
                            st.warning("üìÅ Archivo local no encontrado")
